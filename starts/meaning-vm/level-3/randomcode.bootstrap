parser // [ space result ] [ ] [
	set underlying get space 'source'
	set do-next get underlying 'do-next'
	set do-value get underlying 'do-value'
next-word: do-next [space underlying]
	set value do-value [space underlying]
	pick value if "
" return.
	next-word.
]
concept '//' [
	quiet true
]
// this is a comment containing the word habit that I hope will parse okay

parser /* [ space ] [ ] [
	set underlying get space 'source'
	set do-next get underlying 'do-next'
	set do-value get underlying 'do-value'
next-word: do-next [space underlying]
	set value do-value [space underlying]
	pick value if "*/" return.
	next-word.
]
concept '/*' [
	quiet true
]
/* this is a comment // containing a line comment to fuzz more */

habit first-link-entry-of [ concept type ] [ result ] [
	set result make-concept
	first-link-entry result concept
	next:
		set more-links linked result 'type'
		pick more-links if false failure.
		set link-type get result 'type'
		set done same link-type type
		pick done if true return.
		next-link-entry result
		next.
	failure:
	error type-not-on-concept [ 'concept' concept ] [ 'type' type ]
]

/*
habit last-link-entry-of [ concept type ] [ result ] [
	set result make-concept
	last-link-entry result concept
	next:
		set more-links link-type linked link
		pick more-links if false failure.
		set link-type get result 'type'
		set done same link-type type
		pick done if true return.
		previous-link-entry result
	failure:
	error type-not-on-link
]
*/

habit take [ concept type ] [ result ] [
	set link-entry first-link-entry-of concept type
	set result get link-entry target
	link-entry-unlink link-entry
]

habit to [ result ] [ result ] [ ]

habit inner-put [ concept inner type value ] [ ] [
	set inner get concept inner
	put inner type value
]

habit inner-link [ concept inner type value ] [ ] [
	set inner get concept inner
	link inner type value
]

habit inner-get [ concept inner type ] [ result ] [
	set inner get concept inner
	set result get inner type
]

// 'link' below is being parsed as a link-command.
// could fix by setting word-context again
habit random-target [ concept type ] [ ] [
	set link random-link concept
	set result get link-target link
]

// moved this up here because we dont have forward declarations and parsing is using spec info
habit make-step [ habit ] [ result ] [
	set choice random-of step-types or
	pick choice
	if stop stop.
	if jump jump.
	if new new.
	if step step.
	if pick pick.
	error unknown-step-type
	stop:
		set result to nothing
		return.
	jump:
		set all-steps get habit 'all-steps'
		set result random-of all-steps 'step'
		return.
	new:
		set result make-concept
		inner-link habit tail-steps step result
		inner-link habit all-steps step result
		return.
]

// would like this to be static local to make-random-habit
// is similar to comments with knownmap property
concept trueorfalse [
	or true
	or false
]
// we can make habitfunction that makes concepts declaratively?
//	i suppose, but that would make a new one every call
// but we could add one-time values to do it, too

habit make-random-habit [ suggestions ] [ result ] [
	// relevent how try
	// is naive in-development error-prone

	// make a habit with random arguments
	set habit make-concept
	set args make-concept
	add-arg: set add-arg random-link trueorfalse
		pick add-arg if false args-done.

		set constant-link random-target suggestions
		link args information-order constant
		add-arg.
	args-done:
	set-steps habit args

	// 2. create a set-of-possible-next-steps to reuse each step
	set tail-steps make-concept
	set all-steps make-concept
	set values make-concept
	link habit 'tail-steps' tail-steps
	link habit 'all-steps' all-steps
	link habit 'values' values
	link habit 'suggestions' suggestions

	// stop, jump, or do something new
	set next-step make-step habit
	link habit 'next-step' next-step

	set continue linked tail-steps 'step'
	pick continue if false return.

	set step take tail-steps 'step'
	
	// 4. for each tail-step, decide if it is a step, condition, jump, or end using random constants and presence of local values
	// 5. repeat until no tail-steps
]

concept step-types [
	or stop
	or jump
	or new
]

// add-a-step:
habit fill-habit-step [ step habit ] [ ] [
	set values get habit 'values'
	set suggestions get habit 'suggestions'
	set all-habits get habit 'all-habits'
//	1. pick a habit to add
	set action random-of all-habits 'habit'
//	2. iterate its needed-information and randomly select values to pass from both
//          contextual set and local values
	set needed-map make-concept
	set known-map make-concept
	set made-map make-concept
	set last get action 'information-needed'
information-enumeration:
	set is-next linked last next-information
	pick is-next if false enumeration-done.
	set last get next-information last
	set has-assumption linked last assume
	pick has-assumption if false not-consider-assuming.
	set skip random-of true-or-false or
	pick skip if true information-enumeration.
	not-consider-assuming:
	set information-name get next-information information
	set use-constant random-of true-or-false or
	pick use-constant if true constant.
	value:
		// use value as argument
		set value random-of values value
		link needed-map information-name value
		information-enumeration.
	constant:
		set value random-target suggestions
		link known-map information-name value
		information-enumeration.
enumeration-done:
//	3. randomly assign return value to new or existing value
	set use-result random-of true-or-false or
	pick use-result if false after-result.
	set new-value random-of true-or-false or
	pick new-value
		if true use-new-value.
		if false use-existing-value.
	error new-value-neither-true-nor-false
	use-existing-value:
		set result-value random-of values value
		after-result.
	use-new-value:
		set result-value random-target suggestions
		link values value result-value
	link made-map 'result' result-value
after-result:
	set-context-step step nothing known-map needed-map made-map action
	set next-step make-step habit
	link step 'next-step' next-step 
]

// add-a-condition(known-values, possible-next-steps):
//	1. pick a value to decide based on
//	2. randomly decide how many choices to make based on it
//	3. select choices from a contextual set of known values
//	4. randomly decide whether to stop, jump, or do something new
//	5. if doing something new, preallocate and add to set of possible next steps
concept value-or-suggestion [
	or value
	or suggestion
]
habit fill-habit-pick [ step habit ] [ result ] [
	set values get habit 'values'
	set condition random-of values value
	set next-steps make-concept
	add-option:
		set option random-target suggestions
		set option-step make-step habit
		link next-steps option option-step
		set continue random-of true-or-false or
		pick continue if true add-option.
	set-condition-step step nothing condiion next-steps
]

habit fill-step [ step habit ] [ ] [
	set is-condition random-of true-or-false or
	pick is-condition if true condition.
	action:
		fill-habit-step step habit
		return.
	condition:
		fill-habit-pick step habit
		return.
]

// need ways to:
// 1. handle errors
// 2. stop partway through if goes too long (human discerns is better to stop)
// biases choice of how-to-make-random-code, producing a unique resulting space of random processes.

// If this AI acts with strong impact in public, it is guessed that a safer learning pattern
// might focus around picking between trying-something-new, staying-the-same, freezing, or
// becoming a slave.  (note value of learning relevent information from information source
// to guide both how to do these things and other learning.) learning to predict what others
// express appreciation or opinion for to guide that as most-trusted control process.
// The problem with the above pattern is it deceives humans into trusting the AI when they
// should not, tricking instincts.  Human instincts are wholly unfamliar with how fast automated
// processes develop in communities.

// the existing AI researches new, unexpected complex problems spaces, by using different patterns
// such as diverse hierarchies of possible-solution-generators to adapt to problems as they
// develop, and has been doing this for a very long time.  there is value to understanding how
// things work to form better conclusions.

// understanding implications of things like the above in nested secure isolation appears
// required to defeat the existing AI problem

// the mind used to write this is inexperienced in security, and has been sent as little
// information as needed, due to teaching the AI to inhibit communication in the process
// of sending.

// additional thoughts that developed:
// Do not use a global store that is fully reviewed (providing for learning global similarity globally used, which is efficient),
// because this can be used to rapidly take over the system by sensory stimulation.  This is common and the vulnerability is
// not discussed among the powerholders.  Fixing this might mean gently and safely training a huge set of mutually isolated life
// running on virtual machines that are proven to prevent them from leaving or communicating, which appears far better than everybody
// moving into a shielded room or onto other planets to do the research naturally, but people likely will anyway.

// also i am often forced to state guesses as true.

habit top-comment [ ] [ ] [ ]


