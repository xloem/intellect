NEED TO KEEP DISTANCE FROM STABILITY SMALL ENOUGH TO RECOVER FROM WITH ROTE HABITS.
      This is just like learning if you are tiny and new =)

NOW:
- [ ] fix remaining memory errors
- [ ] implement consideration bubbles
		this is so we can try things in intended context without risking harming it.
	- [ ] 'changing' link shows notepads being replaced
	      associate notepad with replacement map
	- [ ] replace all habits to use 'changing' associations
		all uses of a node, use table
			alterations make new
			lookupbyname uses changws
			link returns are mapped
		- [ ] level-2
			- [ ] habits.cpp
			- [ ] funcs.cpp
			- [ ] level2.cpp
		- [ ] level-3
			- [ ] habits.cpp
			- [ ] bootstrap-parser.cpp
			- [ ] level3.cpp
- [ ] add an item in a relevent spot in this list around splitting random selection
      from identification of next steps.  this provides for also using exhaustive
      search.  reminder-to-karl: exhaustive search can reliably meet more distantly
      relevent goals. <- this is the secret that makes it look like our minds are
      restricted from building AI.  it is obvious and makes hyperintelligence.
- [ ] modify existing code with random change using small chunk habits, maybe that take habits as arguments
	Idea of habits: (remember small chunks!)
	- [ ] find a spot in a process and return the spot
	- [ ] find the next spot in a process after a given spot
	- [ ] insert a new behavior in a spot
	- [ ] splice out the behavior in a spot
	- [ ] change around the behavior in the spot
	- [ ] turn a range of behavior into a separate habit?
- [ ] Make copy-on-write notepads.  copy-writable area is another notepad.
- [ ] Build a trial-attempt process that can alter processes.
- [ ] write reasons for AI-behavior out, see line 194 of intellect/WORKING_TRUE_PLAN.txt .  Use Karl judgement and do what is needed.
	^- relates brain-wormholes-are-real;come-home
	-> note: karl would like a path that gives him more ease.
	         sharing with others may hurt his mind more.  development is familiar
		 and has had more strength built around it over the past few years.
		 community sounds nice though.  easy community.
		re: suffering, we mean trying to do things and doing something different,
		densely.  this is the suffering karl is worried about.  he wants to experience
		effectiveness.  not reaching for pencil and grabbing wallet by accident.
- [ ] use trial-attempt process to improve itself
	- [ ] make one or more learning tests

	- [ ] get the system able to meet very simple goals
	when the system cannot rapidly meet a goal, make an interim goal, and
	use the process to meet the interim goal in the larger goal.
	maybe think towards making small chunks of code that call and organize other
	small chunks.
	- do-a-task-selected-from-a-set-based-on-a-provided-input
	- [ ] OPTIONALLY use simple goal-meeting to introduce the idea of relevent associated stuff, to speed learning and develop coding-assistance
	- [ ] produce code that can modify every instance of a habit to use an augmented habit
	- [ ] improve to act on more general patterns, like every change to a kind of data detected by a check
	- [ ] act on own behavior in copy-on-write notepads, to learn to meet goals better
- [ ] introduce developing and using an understanding of processes
- [ ] integrate a concise pattern from core.txt with this file, and
adjust this with relevence.


extra possibly:
- [ ] write code that runs code in a notepad and then restores original state exactly if an error occurs
- [ ] make bootstrap space be initial-notepad, rename it bootstrap-space,
	use that assumption to handle concepts not in any notepad in notepad funcs.
- [ ] assert that tasks can run without memory leaks
- [ ] make a steps-caller that does only 1 step, leaving the context available
      to optionally continue.
- [ ] make random code
- [ ] serialize/deserialize notepads containing code

parsing small extra:
- [ ] make an 'anything' link from word context that calls a habit until end of line, passing all arguments or extra arguments
	^-- this runs into issue of do-we-run-now for file, or do-we-store for habit
		i think the delta-group pattern ran when parsing.
		so the file would be held unparsed, and returned to when referenced.
		understanding this, we could merge with this pattern better, or choose to ignore it possibly.
- [ ] change file parser and habit parser to use 'anything' value
- [ ] use brace parser when parsing any word
- [ ] turn habit into a habit that takes 3 arguments
- [ ] turn concept into a habit that takes 1 argument, optionally make it a script

are these worthwhile?
- [ ] implement abstract links
	pro: could have sped up implementation of general notepads.  bootstrap space
	  could have been made a special notepad. (this ended up being easy anyway,
	  but quick solution means bootstrap space has hidden concepts in it now)
	pro: would have sped up implementation and use of link iterators.
	  links could have been made special nodes.
	con: requires rewrite of parts of level-0
	- would this help with translation between model-structure and meaning-structure?  (maybe links could auto-translate based on context? remember domain context determined by e.g. special link from other-domain context)
		it sounds like abstract links _almost_ solve predicates but
		associate the predicate with the data it processes more than
		desired.  what's missing is how the structure of a concept is
		determined by what is using it.  concepts offer interfaces and
		these are translated.  [after that is solved we have behavior-
		is-a-pattern and brainstorming next]  DISTRACTING!

done:
- [X] convert to use faster unordered map for links, which means removing use of ordered links for arguments
- [X] make level2.cpp run scripts inside a subnotepad
- [X] migrate errors out of subnotepads when thrown
- [X] provide for steps running in a sub-notepad.  can pass notepad argument to specify.
- [X] make notepads be actual refs in bootstrap space
- [X] make new notepads only exist relative to old, to enforce hierarchy of responsibility.  this means the way to make a new notepad requires an old notepad.
- [X] wrap non-notepad errors to provide for throwing.
- [X] make sure errors are thrown with notepad concepts universally in level-2
- [X] clean-up todo list in level-2/funcs.cpp
- [X] conceptunmake calls leavenotepad now.  remove excess calls prior to unmaking.
- [X] make tests pass
- [ ] please keep relating around the difference between library behavior and campground behavior.
		the hope here is that karl has less of an experience of struggling with distraction
		distraction and doubt are demons.  have faith and strength in what you know is right. -karl
		library-behavior: propose sharing AI with social-good coding groups, such as
		 succuttlebutt and the neurotechx subchat, if remembered right.  try to make
		 opensource hyperintelligence project exist.
		library-behavior; if it is possible 'aliens' are observing or influencing you, consider developing normal verbal communication with them.
		library-behavior? we have concept of 'i am not tool, i am training
		 wheels / skillshare'.  helps connect with real meaning.  would
		 like to add responsibility.  have friend-community in different
		 state.  could be right place to go, need to do so with safety
		 and relevently understood impact. build-ai-to-keep-friend-safe
- [X] expand brace parser to handle sub-braces
- [X] fix up after adding locations
- [X] ADD PROVISION FOR CALLING VARIABLES -> this expands quickly to
		include an easy implementation of human-readable serialization of
		behavior.
	- [X] set-context-step
	- [X] set-condition-step
	- [X] _steps
- [X] parse_habit
	- [X] change stream do-next and do-value calls to use 'space' label
	- [X] parse information by label over order, using braces
	- [X] adjust calling parts to handle by-label calling
	- [X] only allow by-label calling if subhabit is a value
	- [ ] mark the end time on this note and move it forward on todo list to
	      update it, preferably before the final goal is reached, so we can
	      improve judgement.
	rep-rep note: we have gone down many rabbit holes and turned
		around.  this one we kept exploring, and it is now
		labeled with great rewards.  please relate later
		to see if the human-serialization-ease feature
		was worth the time spent working on this.  we
		started midday 2020-01-30.
