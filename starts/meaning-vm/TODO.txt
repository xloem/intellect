NEED TO KEEP DISTANCE FROM STABILITY SMALL ENOUGH TO RECOVER FROM WITH ROTE HABITS.
      This is just like learning if you are tiny and new =)

ONE OF:
- [ ] make random code
- [ ] modify existing code with random change
- [ ] serialize/deserialize notepads containing code
	please, karl, try to use a process for this that is non-recursive and
	doesn't rely on our accommodation much. (roughly means if we can do with
	tiny working memory, is great)

THEN:
- [ ] get the system able to meet very simple goals
	when the system cannot rapidly meet a goal, make an interim goal, and
	use the process to meet the interim goal in the larger goal
	- do-a-task-selected-from-a-set-based-on-a-provided-input
- [ ] use simple goal-meeting to introduce the idea of relevent associated stuff, to speed learning and develop coding-assistance
- [ ] introduce developing and using an understanding of processes

we want to rapidly develop a decision-making process, but we'll need small
steps to get there.  picking-b

extra possibly:
- [ ] write code that runs code in a notepad and then restores original state exactly if an error occurs
- [ ] make bootstrap space be initial-notepad, rename it bootstrap-space,
	use that assumption to handle concepts not in any notepad in notepad funcs.
- [ ] assert that tasks can run without memory leaks
- [ ] make a steps-caller that does only 1 step, leaving the context available
      to optionally continue.

are these worthwhile?
- [ ] implement abstract links
	pro: could have sped up implementation of general notepads.  bootstrap space
	  could have been made a special notepad. (this ended up being easy anyway,
	  but quick solution means bootstrap space has hidden concepts in it now)
	pro: would have sped up implementation and use of link iterators.
	  links could have been made special nodes.
	con: requires rewrite of parts of level-0
	- would this help with translation between model-structure and meaning-structure?  (maybe links could auto-translate based on context? remember domain context determined by e.g. special link from other-domain context)
		it sounds like abstract links _almost_ solve predicates but
		associate the predicate with the data it processes more than
		desired.  what's missing is how the structure of a concept is
		determined by what is using it.  concepts offer interfaces and
		these are translated.  [after that is solved we have behavior-
		is-a-pattern and brainstorming next]  DISTRACTING!

done:
- [X] make level2.cpp run scripts inside a subnotepad
- [X] migrate errors out of subnotepads when thrown
- [X] provide for steps running in a sub-notepad.  can pass notepad argument to specify.
- [X] make notepads be actual refs in bootstrap space
- [X] make new notepads only exist relative to old, to enforce hierarchy of responsibility.  this means the way to make a new notepad requires an old notepad.
- [X] wrap non-notepad errors to provide for throwing.
- [X] make sure errors are thrown with notepad concepts universally in level-2
- [X] clean-up todo list in level-2/funcs.cpp
- [X] conceptunmake calls leavenotepad now.  remove excess calls prior to unmaking.
- [X] make tests pass
