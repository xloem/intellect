parser // [ space result ] [ ] [
	set underlying get space 'source'
	set do-next get underlying 'do-next'
	set do-value get underlying 'do-value'
next-word: do-next [space underlying]
	set value do-value [space underlying]
	pick value if "
" return.
	next-word.
]
concept '//' [
	quiet true
]
parser /* [ space ] [ ] [
	set underlying get space 'source'
	set do-next get underlying 'do-next'
	set do-value get underlying 'do-value'
next-word: do-next [space underlying]
	set value do-value [space underlying]
	pick value if "*/" return.
	next-word.
]
concept '/*' [
	quiet true
]
concept 'bootstrap-list-word-context' [
	"//" '//'
	"/*" '/*'
]

parser call [ space result ] [ result ] [
	set do-next get space 'do-next'
	set do-value get space 'do-value'
	do-next [space space]
	set value do-value [space space]
	set value bootstrap-lookup value
	value
]
concept call [ quiet true ]

habit to [ result ] [ result ] [ ]

habit first-link-entry-of [ concept type ] [ result ] [
	set result make-concept
	first-link-entry result concept
	next:
		set more-links linked result 'type'
		pick more-links if false failure.
		set link-type get result 'type'
		set done same link-type type
		pick done if true return.
		link-entry-next result
		next.
	failure:
	error type-not-on-concept [ 'concept' concept ] [ 'type' type ]
]

habit take [ concept type ] [ result ] [
	set link-entry first-link-entry-of concept type
	set result get link-entry target
	link-entry-unlink link-entry
]

habit inner-put [ concept inner type value ] [ ] [
	set inner get concept inner
	put inner type value
]

habit inner-link [ concept inner type value ] [ ] [
	set inner get concept inner
	link inner type value
]

habit inner-get [ concept inner type ] [ result ] [
	set inner get concept inner
	set result get inner type
]

habit random-target [ concept type ] [ ] [
	set link random-link concept
	set result get link-target link
]

habit get-or-nothing [concept type][result][
	set is-linked linked concept type
	pick is-linked
		if 'true' not-nothing.
		if 'false' nothing.
	error 'linked-not-true-or-false'
nothing:
	set result to 'nothing'
	return.
not-nothing:
	set result get concept type
]

// i don't remember how to do variable arguments, or if they are doable.  hard to make function wrappers.
habit norm-0 [norms norm][][
	set thing-to-do get norms norm
	thing-to-do
]
habit norm-1 [norms norm arg][][
	set thing-to-do get norms norm
	thing-to-do arg
]
habit norm-2 [norms norm arg-1 arg-2][][
	set thing-to-do get norms norm
	thing-to-do arg-1 arg-2
]
